#!/bin/bash

set -euo pipefail

TREES_HOME=$HOME

# Util

function _in-dir {
  if [[ -v 1 ]] ; then
    >/dev/null pushd $1
    shift
    "$@"
    >/dev/null popd
  fi
}

# Init

function init--fish {
cat<<EOF
  function pr
    if [ "\$argv[1]" = "review" -o "\$argv[1]" = "rv" ]
      set -l target_dir \$(~/.local/bin/dev pr \$argv)
      cd \$target_dir
    else
      ~/.local/bin/dev pr \$argv
    end
  end
EOF
}

function init {
  if [[ ! -v 1 ]] ; then
    echo "Missing parameter"
    exit 1
  fi

  case $1 in
    fish)
      init--fish
      ;;

    *)
      echo "$1 is not supported"
      exit 1
      ;;
  esac
}

# Formatting

green="\e[1;32m"
gray="\e[0;37m"
red="\e[1;91m"
reset="\e[0m"
white="\e[1;97m"

function _shh {
  &>/dev/null "$@"
}

function _log {
  2>&1 "$@" | while read -r line ; do
    >&2 echo -e "   ${gray}│ $line${reset}"
  done
}

function _h1 {
  _green "🞂🞂 "
  _white "$@"
  echo
}

function _li {
  _gray "⏵⏵ $@"
  echo
}

function _error {
  _red "!!! "
  _white "$@"
  echo
}

function _green {
  >&2 echo -ne "${green}${@}${reset}"
}

function _gray {
  >&2 echo -ne "${gray}${@}${reset}"
}

function _white {
  >&2 echo -ne "${white}${@}${reset}"
}

# Pull requests

function pr {
  if [[ ! -v 1 ]] ; then
    >&2 echo "pr: missing command"
    exit 1
  fi

  local command=$1 && shift

  case $command in
    auto-merge|am)
      pr--auto-merge "$@"
      ;;

    list|ls)
      pr--list "$@"
      ;;

    review|rv)
      pr--review "$@"
      ;;

    *)
      >&1 echo "Unknown command"
      exit 1
      ;;
  esac
}

function pr--help {
cat<<EOF
Usage: dev pr <command> [args]

COMMANDS
  auto-merge|am   Auto-merge PRs according to certain criteria
  list|ls         List PRs
  review|rv       Prepare a worktree for PR review
EOF
}

function pr--auto-merge {
  pr--list "$@" |
    cut --fields=1 |
    sed s/^#// |
    while read -r num ; do
      gh pr review --approve $num
      gh pr merge --rebase $num
    done
}

function pr--list {
  if [[ -v 1 ]] ; then
    case $1 in
      dep|d)
        gh pr list --search 'status:success dependabot/'
        ;;

      *)
        gh pr list
        ;;
    esac
  else
    gh pr list
  fi
}

function pr--review {
  if [[ ! -v 1 ]] ; then
    >&2 echo "pr review: missing PR number"
    exit 1
  fi

  local branch="$(gh pr view $1 --json headRefName --jq '.headRefName')"

  wt--pull $branch
}

# Help

function help {
cat<<EOF
Usage: dev <namespace> <command> [args]

NAMESPACES
  pr   Pull requests
  wt   Work trees
EOF
}

if [[ -z "$@" ]] ; then
  help
else
  "$@"
fi
