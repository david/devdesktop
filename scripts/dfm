#!/bin/bash

set -euo pipefail

SCRIPT_PATH=$(realpath ${BASH_SOURCE[0]})
SCRIPT_HOME=$(dirname $SCRIPT_PATH)
CONFIG_HOME=$(realpath ${SCRIPT_HOME}/..)
MODULES_HOME=${CONFIG_HOME}/modules

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:- $HOME/.config}

function new {
  local include_config="true"

  while getopts "C" opt; do
    case $opt in
      C)
        include_config="false"
        ;;
    esac
  done

  shift $(($OPTIND - 1))

  MODULE=$1
  MODULE_HOME=$MODULES_HOME/$MODULE

  if [[ -d $MODULE_HOME ]] ; then
    >&2 echo "Module $MODULE already exists."
    return 1
  fi

  mkdir $MODULE_HOME

  cd $MODULE_HOME

  cat <<EOF > Syncfile
TARGETS="*"
PACKAGES="$MODULE"
EOF

  if [[ "$include_config" = "true" ]] ; then
    mkdir -p dot-config/$MODULE
  fi
}

function sync {
  cd $MODULES_HOME

  local install=""
  local uninstall=""
  local m

  for m in * ; do
    MODULE=$m
    MODULE_HOME=$MODULES_HOME/$MODULE

    [[ -f $MODULE_HOME/Syncfile ]] || return 1

    PACKAGES=""
    TARGETS=""

    source $MODULE_HOME/Syncfile

    if sync--module-included ; then
      install=$(echo -e "$install\n${PACKAGES:-}" | sort -u)

      stow --restow --no-folding --ignore=Syncfile --ignore=dconf --dotfiles --target=$HOME $MODULE

      if [[ -d $MODULE_HOME/dconf ]] ; then
        cat $MODULE_HOME/dconf/*.conf | dconf load /
      fi
    else
      uninstall=$(echo -e "$uninstall\n${PACKAGES:-}" | sort -u)

      stow --delete $MODULE
    fi
  done

  [[ -n $(echo "$install" | sed "s/^[[:space:]]*$//") ]] &&
    brew install --quiet $install || true
  [[ -n $(echo "$uninstall" | sed "s/^[[:space:]]*$//") ]] &&
    brew remove $uninstall 2>&1 | grep -v "No such keg" || true
}

function sync--module-included {
  if [[ "${TARGETS:-}" = "*" ]] ; then
    return 0
  elif [[ -n "${CONTAINER_ID:-}" ]] ; then
    if [[ "${TARGETS:-}" = "@*" ]] ; then
      return 0
    elif [[ "${TARGETS:-}" == "@${CONTAINER_ID}" ]] ; then
      return 0
    fi
  elif [[ "${TARGETS:-}" = "*@" ]] ; then
    return 0
  fi

  return 1
}

if [[ -z "$@" ]] ; then
  >&2 echo "Missing command"
  exit 1
fi

case "$1" in
  new|setup|sync)
    $@
    ;;
esac
